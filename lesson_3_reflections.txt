1. When would you want to use a remote repository rather than keeping all your
work local?

Whenever cooperating with other persons, or when working from multiple
computers, or in order to back up my work.

2. Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

I may be working on the same file that was modified in the remote repository,
and conflicts may arise. It is preferable that I choose when to sync the remote
and the local repositories, and to resolve the potential conflicts when I want
to.

3. Describe the differences between forks, clones, and branches. When would you
use one instead of another?

Use forks to clone a repository on github directly; it gives credit to the
owner of the repository. After forking, I can edit the forked repository.

Use clone to clone (locally or from github) a repository.

Use branches within a given repository (in order to try out different things,
for instance).

4. What is the benefit of having a copy of the last known state of the remote
stored locally?

If too many changes are added to the remote and to the local repositories, then
it is more likely that conflicts will arise when we do the merge down the line.

5. How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

Code would have to be sent back and forth between the members of the team.
I don't see anything that would necessarily be easier without using git/github.
But working on the same file, with changes made by multiple members of the team,
definitely seems to be much harder without git / github.

--------------------------------------------------------------------------------
To interact with github:

go to github and create an empty repository.

then, in bash use the following command, to add the repository on github as a
remote:
git remote add origin [url]
the url can be found in the repository on github
I could use any name instead of "origin". It's the name I will use in this
repository to refer to the repository on github. If I only have one remote, it's
standard to name it "origin"
A remote in my local repository is basically a reference to another repository.
When you clone a repository, a remote gets set up for you automatically.

git remote        - see the remote repositories created

to verify that the url was added correctly - use the following command to get
the verbose (-v) information from the remote:

git remote -v

In order to send my changes to the remote:
git push [remote_to_which_I_send_changes] [local_branch_to_be_pushed]

Pull from github (pull all commits reachable from the specified branch on
github):
git pull [remote_name] [branch_I_want_to_pull]
e.g.:
git pull origin master

Update the local copy of the remote branch (origin/master), leaving the actual
local version alone (the master branch - which may have been updated from
origin/master). When there are potentially conflicting changes, use git fetch!!!
Then I can use git log and git diff to see the changes both on the local and the
remote repositories.
e.g.: git fetch origin     - updates all local copies of every branch for the
origin remote (also including the origin/master local copy of the remote branch).
Then I can merge origin/master into master.
git pull origin master - is the same as git fetch origin, followed by
git merge master origin/master. When doing git pull, first, the remote branch
gets fetched, updating the local copy of the remote branch. Then, that branch
gets merged into the local one.

With Git for Windows, running the following in the command line will store your
credentials (so you don't need to provide your credentials related to github
whenever you push something to github):
git config --global credential.helper wincred

// delete branch locally
git branch -d localBranchName

// delete branch remotely
git push origin --delete remoteBranchName

--------------------------------------------------------------------------------
