Style guide for commit messages:
https://udacity.github.io/git-styleguide/

Git cheat sheet:
https://github.com/github/training-kit/blob/master/downloads/github-git-cheat-sheet.pdf


1. What happens when you initialize a repository? Why do you need to do it?

You create the .git folder and you have the setup ready to commit files /
sub-folders and to keep track of changes

2. How is the staging area different from the working directory and the
repository? What value do you think it offers?

The staging area is an 'interim' location, into which / from which you an add /
remove files / sub-folder before committing the changes.

3. How can you use the staging area to make sure you have one commit per logical
change?

Make sure to add the updated file(s) to the staging area after making one
logical change; use git diff to monitor the changes between the state of the
files in the working directory and in the staging area.

4. What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

Branches are useful for working on different versions of the same program.

5. How do the diagrams help you visualize the branch structure?

They show the entire branch structure of the commit history.

6. What is the result of merging two branches together? Why do we represent it
in the diagram the way we do?

The changes done on parallel branches are consolidated.
The various commits on different branches have different parents.

-------------------------------------------------------------------------------

!!!!
git diff (without arguments)    - shows differences between files in working
directory and staging area.

git diff --staged     - shows differences between files in staging area and the
most recent commit in the repository.

git reset             - use it if I accidentally add a file to the staging area.

git reset --hard      - discard any changes in either the working directory or
the staging area. Careful! irreversible action!!! (changes in working directory
and in the staging area were not committed!!!) Always check the changes both in
the working directory and in the staging area before using this command, to make
sure I actually want to discard the changes!!!

git branch            - without arguments - shows current branches
the starred branch is the currently checked out branch - this is the one I
would modify, unless I change the branch.

git branch [branch_name]   - creates a new branch [branch_name]

to switch between branches:
git checkout [branch_name]

git log --graph --oneline [branch1] [branch2]   - visual representation of
commit history for branch1 and branch2; it shows the moment of the split between
the two branches as well.
for example: git log --graph --oneline master coins     - graphs the commit
history for master branch and for coins branch, showing the moment of the split.

git gc            - manually call git's garbage collector. It removes, for
instance, commits left behind by deleted branches. Such commits are still
accessible by their commit IDs, but they are not reachable from existing
branches.
When deleting a branch, I actually delete the label, not the commits themselves,
as long as those commits can still be reached from the existing branches.
If the commits of a deleted branch can no longer be accessed from the existing
branches, the deletion effectively discards the unreachable commits.

git merge branch1 branch2      - merge two branches

git show [commitID]            - changes in the given commit vs its parent
(whoever the parent may be); when merging two branches, it is possible that two
successive commits would not represent successive iterations of the program (if
they come from different branches) and, therefore, using git diff would not show
only what was added in the latter commit vs the former, but other changes as
well - coming from other commits on the latter's branch.

git branch -d branch_name        - deletes a branch1

git checkout -b new_branch_name  - it is equivalent to running two commands:
git branch new_branch_name, and, then, git checkout new_branch_name.

Terminology:
- current last commit of a branch - the tip of that branch;
- merging: process of combining two commits;
